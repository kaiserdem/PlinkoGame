//
//  PlinkoGameViewModel.swift
//  Plinko
//
//  Created by Yaroslav Golinskiy on 15/09/2025.
//

import SwiftUI
import Combine

// MARK: - Game State
class PlinkoGameViewModel: ObservableObject {
    @Published var ball: Ball?
    @Published var score: Int = 0
    @Published var isPlaying: Bool = false
    @Published var totalGames: Int = 0
    @Published var bestScore: Int = 0
    @Published var showCelebration: Bool = false
    
    private var pins: [Pin] = []
    private var slots: [Slot] = []
    private var gameTimer: Timer?
    private var celebrationTimer: Timer?
    private var collisionCount: Int = 0
    private var lastPosition: CGPoint = .zero
    private var gameStartTime: Date = Date()
    
    var gameWidth: CGFloat = UIScreen.main.bounds.width - 40
    var gameHeight: CGFloat = UIScreen.main.bounds.height - 300
    
    init() {
        setupGame()
    }
    
    private func setupGame() {
        // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ –ø—ñ–Ω—ñ–≤
        pins.removeAll()
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–Ω–∏ –≤ —à–∞—Ö–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
        let screenWidth = UIScreen.main.bounds.width
        let pinSpacing: CGFloat = screenWidth * 0.075 // 7.5% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω—É
        let slotYPosition = gameHeight * 0.85 // –ü–æ–∑–∏—Ü—ñ—è —Å–ª–æ—Ç—ñ–≤
        let pinY = slotYPosition - 210 // –ü—ñ–Ω–∏ –Ω–∞ 300 –ø—ñ–∫—Å–µ–ª—ñ–≤ –≤–∏—â–µ —Å–ª–æ—Ç—ñ–≤
        let rows = 8
        
        print("üìå Pin setup:")
        print("üìå Screen width: \(screenWidth)")
        print("üìå Pin spacing (7.5%): \(pinSpacing)")
        print("üìå Pin radius (1%): \(screenWidth * 0.01)")
        print("üìå Ball radius (1.5%): \(screenWidth * 0.015)")
        print("üìå Slot Y: \(slotYPosition)")
        print("üìå Pin Y: \(pinY)")
        print("üìå Game width: \(gameWidth)")
        
        for row in 0..<rows {
            let y = pinY + CGFloat(row) * pinSpacing
            let pinsInRow = row + 3
            
            // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ —è–∫ —É —Å–ª–æ—Ç—ñ–≤
            let totalRowWidth = CGFloat(pinsInRow - 1) * pinSpacing
            let startX = (gameWidth - totalRowWidth) / 2 // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –ø–æ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
            
            print("üìå Row \(row): pins=\(pinsInRow), y=\(y), startX=\(startX)")
            
            for col in 0..<pinsInRow {
                let x = startX + CGFloat(col) * pinSpacing
                pins.append(Pin(position: CGPoint(x: x, y: y)))
                print("üìå Pin \(row)-\(col): x=\(x), y=\(y)")
            }
        }
        
        // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ —Å–ª–æ—Ç—ñ–≤
        slots.removeAll()
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ—Ç–∏ –≤–Ω–∏–∑—É –∑ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏–º–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞–º–∏
        //let screenWidth = UIScreen.main.bounds.width
        let totalSlotWidth = screenWidth * 0.8 // 80% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω—É
        let slotSpacing: CGFloat = 5 // –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å–ª–æ—Ç–∞–º–∏ 5 –ø—ñ–∫—Å–µ–ª—ñ–≤
        let slotWidth = (totalSlotWidth - CGFloat(9) * slotSpacing) / 10 // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
        let slotHeight: CGFloat = min(gameHeight * 0.08, 30) // 8% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏
        let slotY = gameHeight * 0.85 // 85% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (15% –≤—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ –Ω–∏–∑—É)
        let startSlotX = (screenWidth - totalSlotWidth) / 2 // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –ø–æ –µ–∫—Ä–∞–Ω—É
        
        print("üì± Screen width: \(screenWidth)")
        print("üìê Total slot width (80%): \(totalSlotWidth)")
        print("üìê Individual slot width: \(slotWidth)")
        print("üìê Start slot X (centered): \(startSlotX)")
        print("üìê Slot Y position: \(slotY)")
        
        let slotPoints = [100, 50, 20, 10, 5, 5, 10, 20, 50, 100]
        let slotColors: [Color] = [.red, .orange, .yellow, .green, .blue, .blue, .green, .yellow, .orange, .red]
        
        for i in 0..<10 {
            let x = startSlotX + CGFloat(i) * (slotWidth + slotSpacing)
            let rect = CGRect(x: x, y: slotY, width: slotWidth, height: slotHeight)
            slots.append(Slot(rect: rect, points: slotPoints[i], color: slotColors[i]))
            print("üìê Slot \(i): x=\(x), width=\(slotWidth), spacing=\(slotSpacing), rect=\(rect)")
        }
    }
    
    func startGame() {
        guard !isPlaying else { return }
        
        isPlaying = true
        score = 0
        showCelebration = false
        collisionCount = 0
        gameStartTime = Date()
        
        // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –∫—É–ª—å–∫–∏ –∑ –º–µ–Ω—à–æ—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é (–≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç—å)
        ball = Ball(
            position: CGPoint(x: gameWidth / 2, y: 20),
            velocity: CGVector(dx: Double.random(in: -2...2), dy: Double.random(in: 0.5...1.5))
        )
        
        startGameLoop()
    }
    
    private func startGameLoop() {
        gameTimer = Timer.scheduledTimer(withTimeInterval: 1/60, repeats: true) { _ in
            self.updateGame()
        }
    }
    
    private func updateGame() {
        guard var currentBall = ball else { return }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫—É–ª—å–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞
        let distanceMoved = sqrt(pow(currentBall.position.x - lastPosition.x, 2) + 
                               pow(currentBall.position.y - lastPosition.y, 2))
        
        if distanceMoved < 0.5 {
            collisionCount += 1
            if collisionCount > 30 { // –Ø–∫—â–æ –∫—É–ª—å–∫–∞ –Ω–µ —Ä—É—Ö–∞—î—Ç—å—Å—è 30 –∫–∞–¥—Ä—ñ–≤
                // –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–º—ñ–Ω—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫—É–ª—å–∫–∏
                currentBall.position.y += 5
                currentBall.velocity.dy = 2
                collisionCount = 0
            }
        } else {
            collisionCount = 0
        }
        
        lastPosition = currentBall.position
        
        // –î–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é –¥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        let gravity: CGFloat = 0.3
        currentBall.velocity.dy += gravity
        
        // –î–æ–¥–∞—î–º–æ –æ–ø—ñ—Ä –ø–æ–≤—ñ—Ç—Ä—è (–Ω–µ–≤–µ–ª–∏–∫–µ —É–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è)
        let airResistance: CGFloat = 0.998
        currentBall.velocity.dx *= airResistance
        currentBall.velocity.dy *= airResistance
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫—É–ª—å–∫–∏
        currentBall.position.x += currentBall.velocity.dx
        currentBall.position.y += currentBall.velocity.dy
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
        if currentBall.position.x - currentBall.radius <= 0 || 
           currentBall.position.x + currentBall.radius >= gameWidth {
            currentBall.velocity.dx *= -0.8
            currentBall.position.x = max(currentBall.radius, 
                                       min(gameWidth - currentBall.radius, currentBall.position.x))
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑ –ø—ñ–Ω–∞–º–∏
        for pin in pins {
            let distance = sqrt(pow(currentBall.position.x - pin.position.x, 2) + 
                              pow(currentBall.position.y - pin.position.y, 2))
            
            if distance < currentBall.radius + pin.radius {
                // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
                SoundManager.shared.playPinHit()
                
                // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥–±–∏—Ç—Ç—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó
                let angle = atan2(currentBall.position.y - pin.position.y, 
                                currentBall.position.x - pin.position.x)
                let speed = sqrt(pow(currentBall.velocity.dx, 2) + pow(currentBall.velocity.dy, 2))
                
                // –í—ñ–¥–±–∏—Ç—Ç—è –∑ –≤—Ç—Ä–∞—Ç–æ—é –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                let bounceSpeed = max(speed * 0.8, 1.5) // –ó–±—ñ–ª—å—à—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å
                currentBall.velocity.dx = cos(angle) * bounceSpeed
                currentBall.velocity.dy = sin(angle) * bounceSpeed
                
                // –í—ñ–¥—à—Ç–æ–≤—Ö—É—î–º–æ –∫—É–ª—å–∫—É –≤—ñ–¥ –ø—ñ–Ω–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º
                let overlap = currentBall.radius + pin.radius - distance + 2 // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
                currentBall.position.x += cos(angle) * overlap
                currentBall.position.y += sin(angle) * overlap
                
                // –Ø–∫—â–æ –∫—É–ª—å–∫–∞ —Ä—É—Ö–∞—î—Ç—å—Å—è –∑–∞–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–æ, –¥–æ–¥–∞—î–º–æ —ñ–º–ø—É–ª—å—Å
                if speed < 2.0 {
                    currentBall.velocity.dy += 1.0 // –î–æ–¥–∞—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —ñ–º–ø—É–ª—å—Å
                }
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≤ —Å–ª–æ—Ç–∏
        for slot in slots {
            if slot.rect.contains(currentBall.position) {
                score += slot.points
                SoundManager.shared.playSlotHit()
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                totalGames += 1
                if score > bestScore {
                    bestScore = score
                    showCelebration = true
                    startCelebration()
                }
                
                endGame()
                return
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫—É–ª—å–∫–∞ –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ
        if currentBall.position.y > gameHeight {
            endGame()
            return
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º–∞—É—Ç –≥—Ä–∏ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        if Date().timeIntervalSince(gameStartTime) > 30 {
            endGame()
            return
        }
        
        ball = currentBall
    }
    
    private func endGame() {
        isPlaying = false
        gameTimer?.invalidate()
        gameTimer = nil
        ball = nil
    }
    
    private func startCelebration() {
        celebrationTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: false) { _ in
            self.showCelebration = false
        }
    }
    
    func resetStats() {
        totalGames = 0
        bestScore = 0
        score = 0
    }
    
    func getPins() -> [Pin] { pins }
    func getSlots() -> [Slot] { slots }
}
